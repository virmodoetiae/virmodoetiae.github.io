{
    "UIScale": 0.6000000238418579,
    "autoSaveEnabled": true,
    "autoSaveInterval": 120.0,
    "resources": {},
    "sharedUniforms": {
        "windowResolution": [
            512.0,
            96.0
        ],
        "exportWindowResolutionScale": 8.0,
        "time": 0.0,
        "timePaused": true,
        "timeLooped": false,
        "timeBounds": [
            0.0,
            1.0
        ],
        "randomGeneratorPaused": false,
        "iWASD": [
            16.741355895996094,
            -8.345582962036133,
            -8.685482025146484
        ],
        "iWASDSensitivity": 0.05000000074505806,
        "iWASDInputEnabled": true,
        "iLook": [
            -0.6234169602394104,
            0.48196083307266235,
            0.6162593960762024
        ],
        "iLookSensitivity": 0.08299999684095383,
        "iLookInputEnabled": true,
        "iMouseInputEnabled": true,
        "iKeyboardInputEnabled": true,
        "smoothTimeDelta": false,
        "resetTimeOnFrameCounterReset": false,
        "vSyncEnabled": true,
        "uniforms": {}
    },
    "sharedFragmentSourceSize": 2603,
    "sharedFragmentSource": "// Common source code is shared by all fragment shaders across all layers and\n// has access to all shared in/out/uniform declarations\n\n#define IF_FRAG_X(X) if (int(gl_FragCoord.x)==X)\n#define IF_FRAG_Y(Y) if (int(gl_FragCoord.y)==Y)\n#define IF_FRAG_XY(X,Y) if (int(gl_FragCoord.x)==X && int(gl_FragCoord.y)==Y)\n\n#define IF_MOUSE if (int(gl_FragCoord.x)==int(iMouse.x) && int(gl_FragCoord.y)==int(iMouse.y))\n\n// Keyboard defs for convenience. To access the state of a key, use the ivec3\n// iKeboard[KEY_XXX] uniform, where KEY_XXX is replaced by one of the defs here\n// below. The three components .x, .y, .z are 1 if the key is pressed (but not\n// held), held, toggled respectively, 0 otherwise\n#define KEY_TAB 9\n#define KEY_LEFT 37\n#define KEY_RIGHT 39\n#define KEY_UP 38\n#define KEY_DOWN 40\n#define KEY_DELETE 46\n#define KEY_BACKSPACE 8\n#define KEY_SPACE 32\n#define KEY_ENTER 13\n#define KEY_ESCAPE 27\n#define KEY_APOSTROPHE 222\n#define KEY_COMMA 188\n#define KEY_MINUS 189\n#define KEY_PERIOD 190\n#define KEY_SLASH 191\n#define KEY_SEMICOLON 186\n#define KEY_EQUAL 187\n#define KEY_LEFT_BRACKET 219\n#define KEY_BACKSLASH 220\n#define KEY_RIGHT_BRACKET 221\n#define KEY_GRAVE_ACCENT 192\n#define KEY_CAPS_LOCK 20\n#define KEY_LEFT_SHIFT 16\n#define KEY_LEFT_CONTROL 17\n#define KEY_LEFT_ALT 18\n#define KEY_LEFT_SUPER 91\n#define KEY_RIGHT_SHIFT 16\n#define KEY_RIGHT_CONTROL 17\n#define KEY_RIGHT_ALT 18\n#define KEY_0 48\n#define KEY_1 49\n#define KEY_2 50\n#define KEY_3 51\n#define KEY_4 52\n#define KEY_5 53\n#define KEY_6 54\n#define KEY_7 55\n#define KEY_8 56\n#define KEY_9 57\n#define KEY_A 65\n#define KEY_B 66\n#define KEY_C 67\n#define KEY_D 68\n#define KEY_E 69\n#define KEY_F 70\n#define KEY_G 71\n#define KEY_H 72\n#define KEY_I 73\n#define KEY_J 74\n#define KEY_K 75\n#define KEY_L 76\n#define KEY_M 77\n#define KEY_N 78\n#define KEY_O 79\n#define KEY_P 80\n#define KEY_Q 81\n#define KEY_R 82\n#define KEY_S 83\n#define KEY_T 84\n#define KEY_U 85\n#define KEY_V 86\n#define KEY_W 87\n#define KEY_X 88\n#define KEY_Y 89\n#define KEY_Z 90\n#define KEY_F1 112\n#define KEY_F2 113\n#define KEY_F3 114\n#define KEY_F4 115\n#define KEY_F5 116\n#define KEY_F6 117\n#define KEY_F7 118\n#define KEY_F8 119\n#define KEY_F9 120\n#define KEY_F10 121\n#define KEY_F11 122\n#define KEY_F12 123\n\n#define CROSSHAIR if(int(fragCoord.x) == int(iResolution.x/2) || int(fragCoord.y) == int(iResolution.y/2)){fragColor = vec4(1,0,0,1);}\n\n#define IF_CENTER_FRAG IF_FRAG_XY(int(iResolution.x/2),int(iResolution.y/2))\n\n// For convenience when importing ShaderToy shaders\n#define SHADERTOY_MAIN void main(){mainImage(fragColor, fragCoord);}\nvec2 fragCoord = gl_FragCoord.xy; ",
    "sharedStorage": {
        "intDataViewStartIndex": 0,
        "intDataViewEndIndex": 7,
        "floatDataViewEndIndex": 50,
        "floatDataViewStartIndex": 0,
        "isFloatDataAlsoShownAsColor": false,
        "floatDataViewPrecision": 6,
        "floatDataViewExponentialFormat": false,
        "floatDataViewComponents": [
            1,
            1,
            1,
            1
        ],
        "intType": 0,
        "floatType": 0,
        "intDataSize": 16,
        "floatDataSize": 256,
        "nFloatComponents": 4
    },
    "layers": {
        "Source": {
            "renderTarget": 1,
            "resolution": [
                512,
                96
            ],
            "resolutionRatio": [
                1.0,
                1.0
            ],
            "isAspectRatioBoundToWindow": true,
            "rescaleWithWindow": true,
            "depth": 0.0,
            "internalFramebuffer": {
                "format": 9,
                "wrapModes": [
                    0,
                    0
                ],
                "magFilterMode": 1,
                "minFilterMode": 1,
                "exportClearPolicy": 0
            },
            "exportData": {
                "resolutionScale": 0.25,
                "rescaleWithOutput": false,
                "windowResolutionScale": 8.0
            },
            "shader": {
                "fragmentSourceSize": 18669,
                "fragmentSource": "precision mediump float;\n\n//----------------------------------------------------------------------------//\n\n#define ANTI_ALIASING true\n\n// Number of rays propagated per pixel\n#define N_SAMPLES 1\n\n// Maximum number of bounces per ray\n#define N_BOUNCES 8\n\n// Increase to avoid visual artifacts if SDFs get excessively non-Euclidean\n#define SAFETY_FACTOR 10.\n\n// Max number of ray marching steps\n#define MAX_STEPS 1000 \n\n// Minimum distance from any scene surface below which ray marching stops\n#define MIN_DIST 1e-4\n\n// Maximum distance from any scene surface beyond which ray marching stops\n#define MAX_DIST 2000\n\n// Useful quantities\n#define PI 3.14159\n#define PIBY2 1.57078\n#define PIBY4 0.785398\n#define UP vec3(0,1,0)\n#define RT vec3(-1,0,0)\n#define FW vec3(0,0,1)\n\n//----------------------------------------------------------------------------//\n// Misc\n\nvec3 rotate(vec3 v, float t, vec3 a)\n{\n    vec4 q = vec4(sin(t/2.0)*a.xyz, cos(t/2.0));\n    return v + 2.0*cross(q.xyz, cross(q.xyz, v) + q.w*v);\n}\n\n//----------------------------------------------------------------------------//\n// Pseudo-random number generator and helpers\n\nuint gSeed = floatBitsToUint(1.389*qc.x) +\n             floatBitsToUint(1.918*qc.y) +\n             0x19181389*iFrame;\n                            // Base prng for all others, inspired by Murmur1\nfloat prng(inout uint seed) // [Stateless] uint seed -> float in [0, 1]\n{\n    const uint m = 0x5bd1e995u;\n    uint r = seed ^ 4u;\n    seed *= m; seed ^= seed >> 24u; seed*= m;\n    r *= m; r ^= seed; r ^= r >> 11u; r *= m;\n    return float(r)/0xffffffffu;\n}\n// [Stateful] Generate next float in [0, 1] and update state\nfloat prng1() {return prng(gSeed);}\n// [Stateful] Generate next vec2  in [0, 1] and update state\nvec2 prng2() {return vec2(prng1(), prng1());}\n// [Stateful] Generate next vec3  in [0, 1] and update state\nvec3 prng3() {return vec3(prng1(), prng1(), prng1());}\n\nvec3 randomUnitVector()\n{\n    vec3 h = prng3() * vec3(2.,6.283185,1.)-vec3(1,0,0);\n    return pow(h.z,1./3.)*vec3(sqrt(1.-h.x*h.x)*vec2(sin(h.y),cos(h.y)),h.x);\n}\n\n//----------------------------------------------------------------------------//\n// Materials\n\nstruct Material\n{\n    vec3  color;\n    float emittance;\n    float diffusiveReflectance;\n    float specularReflectance;\n    float transmittance;\n    float roughness;\n    float refractiveIndex;\n};\n\n// Material of the final 'hit' point\nMaterial gSceneMaterial;\n\n// Refractive index of the 'void' material encompassing all regions where the\n// scene SDF is positive\nfloat gVoidRefractiveIndex = 1.0;\n\n// Refractive index of the material that contains the current 'hit' point\nfloat gSceneRefractiveIndex = 1.0;\n\n#define MATERIAL_LIGHT_SOURCE(color, emittance) Material(color, emittance, 1.,0.,0.,0.,0.)\n#define MATERIAL_LAMBERTIAN(color) Material(color, 0.,1.,0.,0.,0.,0.)\n#define MATERIAL_METAL(color, roughness) Material(color, 0.,0.,1.,0.,roughness,0.)\n// Parameters are: \n//      color;\n//      reflectance at 90Â°  (ref);\n//      transmittance       (tra); \n//      surface roughness   (rgh);\n//      index of refraction (eta);\n// Parameters ref and tra need not sum to 1., they are normalized automatically\n#define MATERIAL_GLASS(color, ref, tra, rgh, eta) Material(color, 0.,0., ref, tra, rgh, eta)\n\nMaterial mixMaterials(Material m1, Material m2, float h)\n{\n    return Material\n    (\n        mix(m2.color, m1.color, h),\n        mix(m2.emittance, m1.emittance, h),\n        mix(m2.diffusiveReflectance, m1.diffusiveReflectance, h),\n        mix(m2.specularReflectance, m1.specularReflectance, h),\n        mix(m2.transmittance, m1.transmittance, h),\n        mix(m2.roughness, m1.roughness, h),\n        mix(m2.refractiveIndex, m1.refractiveIndex, h)\n    );\n}\n\nvoid mixWithSceneMaterial(Material m, float h)\n{\n    gSceneMaterial.color = \n        mix(m.color,                gSceneMaterial.color,                 h);\n    gSceneMaterial.emittance = \n        mix(m.emittance,            gSceneMaterial.emittance,             h);\n    gSceneMaterial.diffusiveReflectance = \n        mix(m.diffusiveReflectance, gSceneMaterial.diffusiveReflectance,  h);\n    gSceneMaterial.specularReflectance = \n        mix(m.specularReflectance,  gSceneMaterial.specularReflectance,   h);\n    gSceneMaterial.transmittance = \n        mix(m.transmittance,        gSceneMaterial.transmittance,         h);\n    gSceneMaterial.roughness = \n        mix(m.roughness,            gSceneMaterial.roughness,             h);\n    gSceneMaterial.refractiveIndex = \n        mix(m.refractiveIndex,      gSceneMaterial.refractiveIndex,       h);\n}\n\n//----------------------------------------------------------------------------//\n// SDFs\n\nfloat sphereSDF(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat rectCuboidSDF(vec3 p, vec3 l)\n{\n    vec3 q = abs(p)-l/2.;\n    return length(max(q,0.0))+min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat torusSDF(vec3 p, float ro, float ri)\n{\n    vec2 q = vec2(length(p.xz)-ro,p.y);\n    return length(q)-ri;\n}\n\nfloat cylinderSDF(vec3 p, float r, float h)\n{\n    return max(max(length(p.xz)-r, p.y-h/2), -p.y-h/2);\n}\n\nfloat hexagonalPrismSDF(vec3 p, float r, float h)\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    float y = p.y;\n    p.y = p.z;\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy,p.xy),0.0)*k.xy;\n    p.xy -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return max(max(length(p.xy)*sign(p.y), y-h/2.), -y-h/2.);\n}\n\n// SDF Operations (not all of them are used). The 'f' parameter is used as a\n// mixing factor to mix materials to provide smooth material transitions (i.e.,\n// a material that smoothly transitions from metal to e.g. lambertian or glass,\n// as weird as that may look)\n\nfloat uniteSDFs(float sdf1, float sdf2, out float f)\n{\n    if (sdf1 < sdf2)\n    {\n        f = 1.;\n        return sdf1;\n    }\n    f = 0.;\n    return sdf2;\n}\n\nfloat subtractSDFs(float sdf1, float sdf2, out float f)\n{\n    f = 0.;\n    return max(-sdf1, sdf2);\n}\n\nfloat intersectSDFs(float sdf1, float sdf2, out float f)\n{\n    if (sdf1 > sdf2)\n    {\n        f = 1.;\n        return sdf1;\n    }\n    f = 0.;\n    return sdf2;\n}\n\nfloat smoothUniteSDFs(float sdf1, float sdf2, float s, out float f)\n{\n    f = clamp(0.5+0.5*(sdf2-sdf1)/s, 0.0, 1.0);\n    return mix(sdf2, sdf1, f)-s*f*(1.0-f);\n}\n\nfloat smoothSubtractSDFs(float sdf1, float sdf2, float s, out float f)\n{\n    f = clamp(0.5-0.5*(sdf2+sdf1)/s, 0.0, 1.0);\n    return mix(sdf2, -sdf1, f + s*f*(1.0-f));\n}\n\nfloat smoothIntersectSDFs(float sdf1, float sdf2, float s, out float f)\n{\n    f = clamp(0.5-0.5*(sdf2-sdf1)/s, 0.0, 1.0);\n    return mix(sdf2, sdf1, f)+s*f*(1.0-f);\n}\n\n//----------------------------------------------------------------------------//\n// Ray\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nRay cameraRay(vec2 uv, vec3 cp, vec3 f, float fov)\n{\n    if (ANTI_ALIASING)\n        uv += ((prng2()-.5)/iResolution)/2.;\n    vec3 l = normalize(cross(vec3(0,1,0),f));\n    vec3 u = normalize(cross(f,l));\n    return Ray(cp,normalize(cp+f*fov-uv.x*l+uv.y*u-cp));\n}\n\n//----------------------------------------------------------------------------//\n//----------------------------------------------------------------------------//\n//----------------------------------------------------------------------------//\n\nvec2 rotate(vec2 v, float t)\n{\n    float s = sin(t);\n    float c = cos(t);\n    return mat2(c, s, -s, c)*v;\n}\n\nfloat sceneSDF(vec3 p, bool computeMaterial)\n{\n    float scene=MAX_DIST, fMix, fDummy;\n    p.xy = rotate(p.xy, assemblyAngle);\n    p.y+=2;\n    /*\n    // Box with light source\n    vec3 box = vec3(3);\n    scene = min(min(p.y+box.y/2., -p.y+box.y/2.), -p.z+box.z/2.);\n    if (computeMaterial)\n        gSceneMaterial = MATERIAL_LAMBERTIAN(vec3(1.));\n    scene = uniteSDFs(scene, p.x+box.x/2., fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_LAMBERTIAN(vec3(.75,.15,0.)), fMix);\n    scene = uniteSDFs(scene, -p.x+box.x/2., fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_LAMBERTIAN(vec3(0.,.5,0.)), fMix);\n    scene = subtractSDFs(p.z+box.z/2., scene, fMix);\n    float light = rectCuboidSDF(p-UP*(box.y/2.), vec3(box.x/3., .01, box.z/3.));\n    scene = uniteSDFs(scene, light, fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_LIGHT_SOURCE(vec3(1.), 40.), fMix);\n        \n    // Stuff in box\n    // Lambertian parallelopiped in on the back-left\n    vec3 p0 = rotate(p+vec3(-box.x/5., .5, -box.z/4.), -.5, UP);\n    scene = uniteSDFs(scene, rectCuboidSDF(p0, vec3(1.,2.,1.)), fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_LAMBERTIAN(vec3(1.)), fMix);\n    \n    // Blue-ish metal sphere\n    p0 = p+vec3(box.x/4., -box.y/8., 0.);\n    scene = uniteSDFs(scene, sphereSDF(p0, 0.2887), fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_METAL(vec3(.5,.75,1.), .0), fMix);\n        \n    // Ice-cube-like thing\n    p0 = rotate(rotate(p+vec3(.125, .5, .5), 1., UP), 1.1, RT);\n    scene = uniteSDFs(scene, rectCuboidSDF(p0, vec3(.6))-.1, fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_GLASS(vec3(1.),.06,1.,0.05,1.33),fMix);\n        \n    // Weird thing to demostrate blending of different materials, e.g., metal\n    // and glass\n    p0 = rotate(rotate(p+vec3(-.75, 1, .75), rot0, RT), rot1, FW);\n    float fMixTor;\n    float tor = torusSDF(p0-vec3(.3,0,0)-.1*sin(5*p0.x*p0.z), .35, .15);\n    p0 = p0+vec3(.3,0,0);\n    tor = smoothUniteSDFs(tor,sphereSDF(p0,.25)+.075*cos(20*p0.z),.25,fMixTor);\n    \n    scene = uniteSDFs(scene, tor, fMix);\n    if (computeMaterial)\n    {\n        Material m = mixMaterials\n        (\n            MATERIAL_METAL(vec3(1.), .05),\n            MATERIAL_GLASS(vec3(1.), .06, 1., 0., 1.33),\n            fMixTor\n        );\n        mixWithSceneMaterial(m, fMix);\n    }\n    */\n    \n    // This mapping maps everything to a triangular lattice\n    // of side legth sqrt(2/3) = 0.816496580927726, which means a vertex-\n    // opposite-mid-side distance of sqrt(2)/2, and rotated by pi/12 (= 15Â°)\n    // CCW with respect to the x axis (\n    float F = .366025, G = .211325;\n    float l = sqrt(2./3);\n    vec3 delta = vec3(l/sqrt(2)/2, 0, l/sqrt(2)/2);\n    float radius = pinScale*l*sqrt(3)/4;\n    vec3 ps = scale*(p)-delta;\n    vec2 s  = floor(ps.xz + dot(ps.xz, vec2(F))),\n         pxz = ps.xz -   s + dot(s, vec2(G));\n    vec3 pMod = vec3(pxz.x, ps.y, pxz.y)-delta;\n    \n    vec2 p2r = rotate(p.xz, 3.151492/12.);\n    vec3 pRot = vec3(p2r.x, p.y, p2r.y);\n    float wrapperEnclosure = hexagonalPrismSDF(pRot, 1., MAX_DIST);\n    \n    float cladding = max(\n            cylinderSDF(pMod, radius, assemblyLength*scale),\n            -cylinderSDF(pMod, radius-cladThickness, assemblyLength*2*scale));\n    \n    float wireAngle = 6.283*pMod.y/(wirePitch*scale);\n    vec2 p2w = (radius+wireRadius*pinScale)*vec2(cos(wireAngle), sin(wireAngle));\n    float wire = \n        cylinderSDF(\n            vec3(pMod.x+p2w.x, pMod.y, pMod.z+p2w.y), \n            wireRadius*pinScale, \n            assemblyLength*scale);\n    \n    scene = uniteSDFs(scene, max(min(cladding, wire), wrapperEnclosure), fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_METAL(vec3(.85), .075), fMix);\n    \n    float k1 = cos(length(p.xz));\n    float k2 = cos(length(p.xz)*2.4);\n    float fuelH = scale*(assemblyLength+.25);\n    float fuel = cylinderSDF(pMod, radius*.8, fuelH);\n    float dishing = 2.;\n    fuel = max(fuel, -sphereSDF(pMod-UP*(fuelH/2+.95*dishing*radius), dishing*radius));\n    scene = uniteSDFs(scene, max(fuel, wrapperEnclosure), fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_LIGHT_SOURCE(vec3(1.,.1,0.), 70*(.5+.5*k2)), fMix);\n\n    float wrapper = \n        max(hexagonalPrismSDF(pRot, 1.+wrapperThickness, scale*wrapperLength),\n            -wrapperEnclosure);\n    wrapper = max(wrapper, (p.y-cutHeight)+.8*(-2*p.z-p.x));\n    scene = uniteSDFs(scene, wrapper, fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_GLASS(vec3(1.),.06,1.,0.5,1.33), fMix);\n    \n    float light = sphereSDF(vec3(p.x, .1*p.y, p.z), .6);\n    scene = uniteSDFs(scene, light, fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_LIGHT_SOURCE(vec3(.1, .5, .7), 40), fMix);\n        \n    float glass = sphereSDF(p-UP*10, glassSphereRadius);\n    scene = uniteSDFs(scene, glass, fMix);\n    if (computeMaterial)\n        mixWithSceneMaterial(MATERIAL_GLASS(vec3(1.),.06,1.,0.05,1.33), fMix);\n    \n    return scene;\n}\n\n//----------------------------------------------------------------------------//\n//----------------------------------------------------------------------------//\n//----------------------------------------------------------------------------//\n\n// True if path-marching inside a material\nbool gInside = false;\n\nvec3 sceneNormal(vec3 p, float h)\n{\n    vec2 e = vec2(1.0,-1.0);\n    vec3 n = normalize( e.xyy*sceneSDF(p+e.xyy*h, false)+\n                        e.yxy*sceneSDF(p+e.yxy*h, false)+\n                        e.yyx*sceneSDF(p+e.yyx*h, false)+\n                        e.xxx*sceneSDF(p+e.xxx*h, false));\n    return gInside ? -n : n;\n}\n\n//----------------------------------------------------------------------------//\n\nfloat rayMarch(Ray r)\n{\n    float s = 0;\n    float ds = 0;\n    vec3 p;\n    for (int q=0; q<MAX_STEPS; q++)\n    {\n        p = r.origin+r.direction*s;\n        ds = sceneSDF(p, false)/SAFETY_FACTOR;\n        if (gInside)\n            ds *= -1;\n        s += ds;\n        if ((ds < MIN_DIST && ds > 0) || s > MAX_DIST)\n            break;\n    }\n    s = s*float(s <= MAX_DIST);\n    return s; \n}\n\n//----------------------------------------------------------------------------//\n\n// The result is stored in gSceneMaterial\nvoid computeMaterial(vec3 p, out vec3 n)\n{\n    n = sceneNormal(p, MIN_DIST);\n    sceneSDF(p-n*10*MIN_DIST, true);\n}\n\n//----------------------------------------------------------------------------//\n\nint gBounce = 0;\nint gSample = 0;\nvoid scatter(inout Ray ray, float s)\n{\n    ray.origin += s*ray.direction*(1.-MIN_DIST);\n    vec3 n;\n    computeMaterial(ray.origin, n);\n    ray.origin += n*10*MIN_DIST;\n    \n    vec3 coeff = vec3(\n        gSceneMaterial.diffusiveReflectance,\n        gSceneMaterial.specularReflectance,\n        gSceneMaterial.transmittance);\n    \n    float sum = coeff.x+coeff.y+coeff.z;\n    coeff /= sum;\n    \n    // If material is purely diffusive\n    if (coeff.x > 1.-1e-6)\n    {\n        ray.direction = normalize(n+randomUnitVector());\n        return;\n    }\n    \n    // At near-grazing angles, the only part of the rough surface we can see\n    // are the microfacet 'hill-tops', which tend to have their microfacet\n    // normals reasonably aligned with the macroscopic surface normal.\n    // To 'model' this, I 'attenuate' the roughness based on how grazing the \n    // view angle is. The smoothstep bounds are arbitrary\n    if (gSceneMaterial.roughness > 0.)\n        gSceneMaterial.roughness *= smoothstep(.0, .5, dot(-ray.direction, n));\n       \n    // Microfacet normal & reflected ray\n    vec3 mfn = normalize(n+gSceneMaterial.roughness*randomUnitVector());\n    vec3 mfr = reflect(ray.direction, mfn);\n    \n    // If material is purely reflective\n    if (coeff.x > .999999)\n    {\n        ray.direction = mfr;\n        return;\n    }\n    \n    // Enchance reflectiveness via Schlick approximation for Fresnel reflectance\n    // I am well aware that the base reflectance (i.e., the reflectance at\n    // normal incidence, i.e., my coeff.y) is not a direct input, rather, it is\n    // computed based on the material refractive indices at both inteface sides,\n    // but having the user directly specify the reflectance is more intuitive\n    // when compared to having to reason about the refractive indices of non-\n    // transmissive materials (e.g., wood, steel, you name it...), which make\n    // no intuitive sense. In short, if you want greater physical accuracy, make\n    // sure to always override coeff.y with the ratio of refractive indices\n    // (eta0/eta1 below), and to always provide refractive indices for all \n    // materials \n    coeff.y += (1.-coeff.y)*pow(1.-dot(mfr, n), 5.);\n    coeff.z = max(1.-coeff.x-coeff.y, 0.f);\n    coeff.x = 1.-coeff.y-coeff.z;\n    \n    // Determine what type of scattering the ray undergoes\n    float discriminant = prng1();\n    \n    if (discriminant <= coeff.x)        // Diffusion\n        ray.direction = normalize(n+randomUnitVector());\n    else if (discriminant < 1.-coeff.z) // Reflection\n        ray.direction = mfr;\n    else                                // Transmission with refraction\n    {\n        ray.origin -= 2*n*30*MIN_DIST;\n        gInside = sceneSDF(ray.origin, false) < 0 ? true : false;\n        // gSceneRefractiveIndex always stores the refractive index of the\n        // material the ray-marched point is currently in\n        float eta0 = gSceneRefractiveIndex;\n        float eta1 = \n            gInside ? gSceneMaterial.refractiveIndex : gVoidRefractiveIndex;\n        gSceneRefractiveIndex = eta1;\n        ray.direction = refract(ray.direction, mfn, eta0/eta1);\n        if (length(ray.direction) == 0) // I.e., total reflection\n            ray.direction = mfr;\n    }\n}\n\n//----------------------------------------------------------------------------//\n\nvec3 computeColor(in Ray ray)\n{\n    vec3 pathColor = vec3(1);\n    vec3 color = vec3(0);\n    vec3 skyColor = vec3(.45, 1., 1.);\n    float skyBaseEmittance = 5;\n    for (gBounce=0; gBounce<N_BOUNCES; gBounce++)\n    {\n        float s = rayMarch(ray);\n        if (s > 0.)\n        {\n            scatter(ray, s);\n            color += pathColor*gSceneMaterial.color*gSceneMaterial.emittance;\n            pathColor *= gSceneMaterial.color;\n        }\n        else\n        {\n            float skyEmittance = \n                skyBaseEmittance*(.05+pow(.5+.5*dot(ray.direction, UP), 5));\n            color += pathColor*skyColor*skyEmittance;\n            IF_CENTER_FRAG\n            {\n                ssfData[0].rgb = ray.direction;\n            }\n            break;\n        }\n    }\n    return color;\n}\n\n//----------------------------------------------------------------------------//\n\nvoid main() \n{   \n    Ray ray;\n    fragColor = vec4(0);\n    for (gSample=0; gSample<N_SAMPLES; gSample++)\n    {\n        gBounce = 0;\n        ray = cameraRay(qc, iWASD, iLook, 1);\n        float s0 = sceneSDF(ray.origin, true);\n        gSceneRefractiveIndex = \n            s0 > 0 ? \n            gVoidRefractiveIndex : \n            gSceneMaterial.refractiveIndex;\n        gInside = s0 > 0 ? false : true;\n        fragColor += vec4(computeColor(ray),1.)/N_SAMPLES;\n    }\n    if (isnan(fragColor.r))\n        fragColor = vec4(0,0,0,1);\n    if (!iUserAction)\n        fragColor += texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "uniforms": {
                    "iChannel0": {
                        "type": "sampler2D",
                        "shared": false,
                        "value": "Source"
                    },
                    "scale": {
                        "type": "float",
                        "shared": false,
                        "value": 2.4519999027252197,
                        "min": 0.0,
                        "max": 5.0
                    },
                    "pinScale": {
                        "type": "float",
                        "shared": false,
                        "value": 0.7210000157356262,
                        "min": 0.0,
                        "max": 0.9900000095367432
                    },
                    "cladThickness": {
                        "type": "float",
                        "shared": false,
                        "value": 0.02800000086426735,
                        "min": 0.0,
                        "max": 1.0
                    },
                    "wireRadius": {
                        "type": "float",
                        "shared": false,
                        "value": 0.05000000074505806,
                        "min": 0.0,
                        "max": 1.0
                    },
                    "wirePitch": {
                        "type": "float",
                        "shared": false,
                        "value": 0.9139999747276306,
                        "min": 0.0,
                        "max": 1.0
                    },
                    "wrapperThickness": {
                        "type": "float",
                        "shared": false,
                        "value": 0.02800000086426735,
                        "min": 0.0,
                        "max": 1.0
                    },
                    "assemblyAngle": {
                        "type": "float",
                        "shared": false,
                        "value": 1.684999942779541,
                        "min": 0.0,
                        "max": 3.141590118408203
                    },
                    "assemblyLength": {
                        "type": "float",
                        "shared": false,
                        "value": 15.470999717712402,
                        "min": 0.0,
                        "max": 50.0
                    },
                    "wrapperLength": {
                        "type": "float",
                        "shared": false,
                        "value": 7.880000114440918,
                        "min": 0.0,
                        "max": 50.0
                    },
                    "cutHeight": {
                        "type": "float",
                        "shared": false,
                        "value": 6.538000106811523,
                        "min": 0.0,
                        "max": 10.0
                    },
                    "glassSphereRadius": {
                        "type": "float",
                        "shared": false,
                        "value": 0.7639999985694885,
                        "min": 0.0,
                        "max": 1.0
                    }
                }
            }
        },
        "Window": {
            "renderTarget": 2,
            "resolution": [
                512,
                96
            ],
            "resolutionRatio": [
                1.0,
                1.0
            ],
            "isAspectRatioBoundToWindow": true,
            "rescaleWithWindow": true,
            "depth": 0.03125,
            "internalFramebuffer": {
                "format": 9,
                "wrapModes": [
                    0,
                    0
                ],
                "magFilterMode": 1,
                "minFilterMode": 1,
                "exportClearPolicy": 0
            },
            "exportData": {
                "resolutionScale": 1.0,
                "rescaleWithOutput": true,
                "windowResolutionScale": 8.0
            },
            "shader": {
                "fragmentSourceSize": 621,
                "fragmentSource": "vec3 tonemapACES(vec3 v)\n{\n    v = vec3(\n        .59719f*v.x + .35458f*v.y + .04823f*v.z,\n        .07600f*v.x + .90834f*v.y + .01566f*v.z,\n        .02840f*v.x + .13383f*v.y + .83777f*v.z\n    );\n    v = (v*(v + .0245786f) - .000090537f)/\n        (v*(.983729f*v + .4329510f) + .238081f);\n    return vec3(\n        1.60475f*v.x + -.53108f*v.y + -.07367f*v.z,\n        -.10208f*v.x + 1.10813f*v.y + -.00605f*v.z,\n        -.00327f*v.x + -.07276f*v.y + 1.07602f*v.z\n    );\n}\n\nvoid main()\n{\n    fragColor = texture(iChannel0, tc);\n    fragColor.rgb = tonemapACES(fragColor.rgb/fragColor.a);\n    fragColor.a = 1.;\n    //CROSSHAIR\n}",
                "uniforms": {
                    "iChannel0": {
                        "type": "sampler2D",
                        "shared": false,
                        "value": "Source"
                    }
                }
            }
        }
    },
    "exporter": {
        "type": 0,
        "outputFilepath": "Z:\\shared\\programming\\C++\\shaderthing\\private\\v1.0.0\\final\\banner_8.png",
        "nRenderPasses": 1,
        "areRenderPassesOnFirstFrameOnly": false,
        "resetFrameCounterAfterExport": true,
        "startTime": 0.0,
        "endTime": 1.0,
        "fps": 50.0,
        "gifPaletteMode": 2,
        "gifPaletteBitDepth": 3,
        "gifAlphaCutoff": 0,
        "gifDitherMode": 0
    },
    "sharedPostProcessData": {}
}